{
  "Uuid": "90414042-b996-42bc-99ec-fd1f2a860eb6",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Unjoined ElementR24",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "aaea0604c03f462a8fc112827ce0bcaf",
      "Name": "Do yo want to join Elements?",
      "Type": "boolean",
      "Type2": "boolean",
      "Value": "true",
      "Description": "Enables selection between True and False",
      "SelectedIndex": 0
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "7305fe05138440858b3a5656c450aa92",
      "Inputs": [
        {
          "Id": "07424455c19b4fd3b5dc2eb6cb40ceaf",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d88c31696d3a48fda1b9eddc01625c68",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitServices')\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitNodes')\r\n\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom Autodesk.Revit.DB import *\r\nfrom System.Collections.Generic import List\r\n\r\ndef get_solids_from_element(element):\r\n    solids = []\r\n    geom_element = element.get_Geometry(Options())\r\n    if geom_element:\r\n        for geom_obj in geom_element:\r\n            if isinstance(geom_obj, Solid) and geom_obj.Volume > 0:\r\n                solids.append(geom_obj)\r\n            elif isinstance(geom_obj, GeometryInstance):\r\n                instance_geometry = geom_obj.GetInstanceGeometry()\r\n                for inst_obj in instance_geometry:\r\n                    if isinstance(inst_obj, Solid) and inst_obj.Volume > 0:\r\n                        solids.append(inst_obj)\r\n    return solids\r\n\r\ndef check_solid_intersection(solid1, solid2):\r\n    intersection = BooleanOperationsUtils.ExecuteBooleanOperation(solid1, solid2, BooleanOperationsType.Intersect)\r\n    return intersection is not None and intersection.Volume > 0\r\n\r\ndef get_clashing_elements(doc, category1, category2):\r\n    clashes = []  # Store unique pairs of elements that clash\r\n    collector1 = FilteredElementCollector(doc).OfCategory(category1).WhereElementIsNotElementType()\r\n    collector2 = FilteredElementCollector(doc).OfCategory(category2).WhereElementIsNotElementType()\r\n\r\n    for elem1 in collector1:\r\n        solids1 = get_solids_from_element(elem1)\r\n        if len(solids1) == 0:\r\n            continue\r\n\r\n        for elem2 in collector2:\r\n            solids2 = get_solids_from_element(elem2)\r\n            if len(solids2) == 0:\r\n                continue\r\n\r\n            for solid1 in solids1:\r\n                for solid2 in solids2:\r\n                    if check_solid_intersection(solid1, solid2):\r\n                        if elem1.Id != elem2.Id:  # Ensure not comparing the same element\r\n                            # Ensure the pair (elem1, elem2) is unique by ordering the IDs\r\n                            pair = (elem1, elem2) if elem1.Id.IntegerValue < elem2.Id.IntegerValue else (elem2, elem1)\r\n                            if pair not in clashes:\r\n                                clashes.append(pair)  # Add unique pair\r\n    return clashes\r\n\r\ndef get_clashing_pairs(doc, categories):\r\n    all_clashes = []\r\n    for i in range(len(categories)):\r\n        for j in range(i, len(categories)):\r\n            clashes = get_clashing_elements(doc, categories[i], categories[j])\r\n            all_clashes.extend(clashes)\r\n    return all_clashes\r\n\r\ndef join_geometry_clashes(doc):\r\n    categories_to_check = List[BuiltInCategory]()\r\n    categories_to_check.Add(BuiltInCategory.OST_Walls)\r\n    categories_to_check.Add(BuiltInCategory.OST_Floors)\r\n    categories_to_check.Add(BuiltInCategory.OST_StructuralFraming)\r\n    categories_to_check.Add(BuiltInCategory.OST_Roofs)\r\n\r\n    try:\r\n        clashes = get_clashing_pairs(doc, categories_to_check)\r\n        return clashes  # Return the list of unique clashing elements\r\n    except Exception as ex:\r\n        return str(ex)\r\n\r\n# Access the active document in Dynamo\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nclashing_elements = join_geometry_clashes(doc)\r\n\r\n# Output: List of unique element pairs that are clashing\r\nOUT = clashing_elements",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "7ebee3e1c4064f69bdc92863be6100d1",
      "Inputs": [
        {
          "Id": "232a8f90ff3845baa0f867c935e7c90b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bcc09d337a2b4bd184c7a3b4b4c27234",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitServices')\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitNodes')\r\n\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom Autodesk.Revit.DB import *\r\n\r\n# Get the active document\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Input: view name from the user\r\nview_name = IN[0]  # Input view name\r\n\r\n# Function to create a 3D view\r\ndef create_3d_view(doc, view_name):\r\n    # Check if a 3D view with the given name already exists\r\n    collector = FilteredElementCollector(doc).OfClass(View3D)\r\n    for view in collector:\r\n        if view.Name == view_name:\r\n            return view  # Return the existing view if found\r\n\r\n    # Get the default 3D view type\r\n    view_family_type_collector = FilteredElementCollector(doc).OfClass(ViewFamilyType)\r\n    view_family_type = None\r\n    for vft in view_family_type_collector:\r\n        if vft.ViewFamily == ViewFamily.ThreeDimensional:\r\n            view_family_type = vft\r\n            break\r\n\r\n    if view_family_type is None:\r\n        raise Exception(\"No 3D view family type found.\")\r\n\r\n    # Start a transaction to create the 3D view\r\n    TransactionManager.Instance.EnsureInTransaction(doc)\r\n    \r\n    # Create the 3D view\r\n    new_view = View3D.CreateIsometric(doc, view_family_type.Id)\r\n    new_view.Name = view_name\r\n\r\n    TransactionManager.Instance.TransactionTaskDone()\r\n    \r\n    return new_view\r\n\r\n# Create or find the 3D view\r\nresult_view = create_3d_view(doc, view_name)\r\n\r\n# Output the created or found view\r\nOUT = result_view",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "38f1b3e8a394467f8eb0e0d34ed4b699",
      "Inputs": [
        {
          "Id": "f1462e970a0541d58a3c77e54c85ff1e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a9030256db9c477ba477b0b55ad24c6c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"3D view - Unjoined Elements\";",
      "Id": "7beaa89cb7e74847ae974ec11adfc1a0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e84b64b09a9e4b4a8db0f5a4abc0642e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitServices')\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitNodes')\r\n\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom Autodesk.Revit.DB import *\r\nfrom System.Collections.Generic import List  # Import List from .NET\r\n\r\n# Get the active Revit document\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Input: View and List of Elements\r\nview = UnwrapElement(IN[0])  # Input view (3D view)\r\nelements_to_isolate = [UnwrapElement(e) for e in IN[1]]  # List of elements to isolate\r\n\r\n# Check if input view is valid\r\nif not isinstance(view, View3D):\r\n    raise Exception(\"The input view must be a 3D view.\")\r\n\r\n# Collect all elements visible in the view\r\ncollector = FilteredElementCollector(doc, view.Id).WhereElementIsNotElementType()\r\n\r\n# Start a transaction to modify the view\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n# Create a set of element IDs to isolate\r\nisolate_ids = List[ElementId]([elem.Id for elem in elements_to_isolate])\r\n\r\n# Isolate the elements in the view\r\nview.IsolateElementsTemporary(isolate_ids)\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Output: Confirmation of isolation\r\nOUT = \"Elements isolated in the view\"",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "7fe3f8a3dbac4511839384f21e2aba64",
      "Inputs": [
        {
          "Id": "5008feeedb174882915d0f036d651de1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e736d677e40643c082a863007f7beeeb",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "efeb8e7ab1334675b39a306132d68677",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "220b54d2784546b3a2f990f8045ada06",
      "Inputs": [
        {
          "Id": "6fa4ae2cb0154a96bb1703289e581ab3",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1519989c8ecc47c98dace8a440d3d0e0",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7b3dc769a01d4eff9a2c19fb4d003c48",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n# Get the current document\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Unwrap input elements\r\nitems1 = UnwrapElement(IN[0])\r\nitems2 = UnwrapElement(IN[1])\r\n\r\n# Function to join geometry\r\ndef JoinGeometry(doc, item1, item2):\r\n    try:\r\n        # Attempt to join geometry\r\n        JoinGeometryUtils.JoinGeometry(doc, item1, item2)\r\n        return True\r\n    except Exception as e:\r\n        # Log or return error details if needed\r\n        return False\r\n\r\n# Start the transaction\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n# Perform the join operation based on input types (lists or single elements)\r\nif isinstance(IN[0], list):\r\n    if isinstance(IN[1], list):\r\n        # Both inputs are lists, join corresponding elements\r\n        OUT = [JoinGeometry(doc, x, y) for x, y in zip(items1, items2)]\r\n    else:\r\n        # First input is a list, second is a single element\r\n        OUT = [JoinGeometry(doc, x, items2) for x in items1]\r\nelse:\r\n    if isinstance(IN[1], list):\r\n        # First input is a single element, second is a list\r\n        OUT = [JoinGeometry(doc, items1, x) for x in items2]\r\n    else:\r\n        # Both inputs are single elements\r\n        OUT = JoinGeometry(doc, items1, items2)\r\n\r\n# Complete the transaction\r\nTransactionManager.Instance.TransactionTaskDone()",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "ee4bcb60aa134b7ebc039f3fd645683e",
      "Inputs": [
        {
          "Id": "5377e227610542fcb3ccba2e1b375fa6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4f0cd61896ed423aa64a55bdce42ab99",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "50e2a9a0ae724944add9d412e3cf9ae7",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "13487151afad418a88f3ed3980afe4a9",
      "Inputs": [
        {
          "Id": "d4a0322761cb48ddb0167bc22fca46ef",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "0b03db3c4da0458c802c4a2592d6f912",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6c4942f96f1847f3a3c6178545925820",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "1bc74ee1eac04d7da327b65fdc3c6ca2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "230b1b7c49164792a38004db8a515d79",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "3fa91cfdb4a7415eb70dc62a1da4be28",
      "Inputs": [
        {
          "Id": "233422bef94347e38b72fa37138f7587",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "5e266780fdad4fd18b2596f4dca0d2da",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "be4c1f9577134be7bc469153b7eca17c",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "a0b49f44a094437b8aa0d32dc550a020",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6f47aa0a61934947a74f87e5e00422b7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "9370449425ca4046aa26e5a53de2c2ea",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d34004c4e0744ce6b9bfe7e090a075a9",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "aaea0604c03f462a8fc112827ce0bcaf",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d0bab24c14f741ae8107a473b69e2dbe",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Enables selection between True and False"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\";",
      "Id": "3fb62a03b3be403082e0e13a901ae618",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "65af5c1a426240b18e5719db7544947e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[Passthrough,Waitfor][0];",
      "Id": "5f0b44daef1641d5ae78b95b4ba3f3ba",
      "Inputs": [
        {
          "Id": "a49941603abc475487e70a5b55fea9ed",
          "Name": "Passthrough",
          "Description": "Passthrough",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3f06020c826148508006e5614d49a70d",
          "Name": "Waitfor",
          "Description": "Waitfor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c29baff2475d4f3fa0f817bc8d88750c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Logic.RefactoredIf, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "d720e0a2af6d47898dee070f17cfad55",
      "Inputs": [
        {
          "Id": "40ae52fd37e1479fa373921594211e2f",
          "Name": "test",
          "Description": "Boolean test",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "13990a7759a445098d14ded63e656f5d",
          "Name": "true",
          "Description": "Returned if test is true",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "205f438e223c4ee7a45f076bdf75d674",
          "Name": "false",
          "Description": "Returned if test is false",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1ca2539d75144c2e884655f6d83f44dd",
          "Name": "result",
          "Description": "Result block produced",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the result of either True or False input depending on what boolean value is toggled in the test input. Supports recursion which requires that only a single branch be executed. It's critical that that both True and False branches are isolated and do not interact with each other!"
    },
    {
      "ConcreteType": "CoreNodeModels.Logic.RefactoredIf, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "6ea9c575b9604630a9c1f64340d99377",
      "Inputs": [
        {
          "Id": "a7745d4283a0416197b9ee22cb133ed0",
          "Name": "test",
          "Description": "Boolean test",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3537cc5a35a94fe68f4bf9d7a9cf8229",
          "Name": "true",
          "Description": "Returned if test is true",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0db564de68e84613b527e52d7f4c979d",
          "Name": "false",
          "Description": "Returned if test is false",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8dded3c699e946759173fa87f331e58d",
          "Name": "result",
          "Description": "Result block produced",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the result of either True or False input depending on what boolean value is toggled in the test input. Supports recursion which requires that only a single branch be executed. It's critical that that both True and False branches are isolated and do not interact with each other!"
    }
  ],
  "Connectors": [
    {
      "Start": "d88c31696d3a48fda1b9eddc01625c68",
      "End": "6fa4ae2cb0154a96bb1703289e581ab3",
      "Id": "5387478fdf7b4e458f85b73d4050f71a",
      "IsHidden": "False"
    },
    {
      "Start": "d88c31696d3a48fda1b9eddc01625c68",
      "End": "a49941603abc475487e70a5b55fea9ed",
      "Id": "fe9076b6dbe440d59af920ae52f550e2",
      "IsHidden": "False"
    },
    {
      "Start": "bcc09d337a2b4bd184c7a3b4b4c27234",
      "End": "07424455c19b4fd3b5dc2eb6cb40ceaf",
      "Id": "7ff880467a1042ecb08a104e9eb9c0ec",
      "IsHidden": "False"
    },
    {
      "Start": "a9030256db9c477ba477b0b55ad24c6c",
      "End": "5008feeedb174882915d0f036d651de1",
      "Id": "5e259ff1960e4c389f0cc249a88ddc7b",
      "IsHidden": "False"
    },
    {
      "Start": "e84b64b09a9e4b4a8db0f5a4abc0642e",
      "End": "f1462e970a0541d58a3c77e54c85ff1e",
      "Id": "d588682822ad44ebbd5eacb37c134a1f",
      "IsHidden": "False"
    },
    {
      "Start": "efeb8e7ab1334675b39a306132d68677",
      "End": "3f06020c826148508006e5614d49a70d",
      "Id": "e860505db9f3435da71df52d4a92eec4",
      "IsHidden": "False"
    },
    {
      "Start": "7b3dc769a01d4eff9a2c19fb4d003c48",
      "End": "e736d677e40643c082a863007f7beeeb",
      "Id": "a769173d4bbb4f4a9f4a188048e622b9",
      "IsHidden": "False"
    },
    {
      "Start": "6c4942f96f1847f3a3c6178545925820",
      "End": "13990a7759a445098d14ded63e656f5d",
      "Id": "588bd4620f4e48be90ad33e4dba79bb7",
      "IsHidden": "False"
    },
    {
      "Start": "230b1b7c49164792a38004db8a515d79",
      "End": "0b03db3c4da0458c802c4a2592d6f912",
      "Id": "338807de798348518a303b2316762903",
      "IsHidden": "False"
    },
    {
      "Start": "be4c1f9577134be7bc469153b7eca17c",
      "End": "3537cc5a35a94fe68f4bf9d7a9cf8229",
      "Id": "ff6262307824452e8125ec531725df9b",
      "IsHidden": "False"
    },
    {
      "Start": "6f47aa0a61934947a74f87e5e00422b7",
      "End": "5e266780fdad4fd18b2596f4dca0d2da",
      "Id": "11e2c497330a45b195b8d33e8117ae16",
      "IsHidden": "False"
    },
    {
      "Start": "d34004c4e0744ce6b9bfe7e090a075a9",
      "End": "232a8f90ff3845baa0f867c935e7c90b",
      "Id": "e191530a33e947adba7ac8751a64ce8d",
      "IsHidden": "False"
    },
    {
      "Start": "d0bab24c14f741ae8107a473b69e2dbe",
      "End": "40ae52fd37e1479fa373921594211e2f",
      "Id": "6de517ea809445708791e99d89a02fd6",
      "IsHidden": "False"
    },
    {
      "Start": "d0bab24c14f741ae8107a473b69e2dbe",
      "End": "a7745d4283a0416197b9ee22cb133ed0",
      "Id": "6552fa820eab4b419e3575c5c663ae05",
      "IsHidden": "False"
    },
    {
      "Start": "65af5c1a426240b18e5719db7544947e",
      "End": "205f438e223c4ee7a45f076bdf75d674",
      "Id": "96b3ec112fd74004bdde9f0780f66cb4",
      "IsHidden": "False"
    },
    {
      "Start": "65af5c1a426240b18e5719db7544947e",
      "End": "0db564de68e84613b527e52d7f4c979d",
      "Id": "60dd2fa97f594d868e544b3000ec2f2b",
      "IsHidden": "False"
    },
    {
      "Start": "c29baff2475d4f3fa0f817bc8d88750c",
      "End": "d4a0322761cb48ddb0167bc22fca46ef",
      "Id": "e78197a229fb43fa931c57046bb65028",
      "IsHidden": "False"
    },
    {
      "Start": "c29baff2475d4f3fa0f817bc8d88750c",
      "End": "233422bef94347e38b72fa37138f7587",
      "Id": "76b1074d3e6b4e80a6237e19674a32eb",
      "IsHidden": "False"
    },
    {
      "Start": "1ca2539d75144c2e884655f6d83f44dd",
      "End": "5377e227610542fcb3ccba2e1b375fa6",
      "Id": "55f8c8981c894654bb6ee4d09247d4b7",
      "IsHidden": "False"
    },
    {
      "Start": "8dded3c699e946759173fa87f331e58d",
      "End": "4f0cd61896ed423aa64a55bdce42ab99",
      "Id": "de84d59bc3bc4853a2421259c5721bdf",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": null,
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.17",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "4.0",
      "Data": {}
    }
  ],
  "Author": "None provided",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.17.0.3472",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "_Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Id": "7305fe05138440858b3a5656c450aa92",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 999.811295493813,
        "Y": 654.84839877984
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "7ebee3e1c4064f69bdc92863be6100d1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 791.560542951735,
        "Y": 656.380441560597
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "38f1b3e8a394467f8eb0e0d34ed4b699",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1803.1882150306831,
        "Y": 447.37441381528907
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "7beaa89cb7e74847ae974ec11adfc1a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1465.5049873242108,
        "Y": 440.44616065557722
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "7fe3f8a3dbac4511839384f21e2aba64",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2058.8645784862506,
        "Y": 548.45124931364262
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "220b54d2784546b3a2f990f8045ada06",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1248.4998894629646,
        "Y": 665.1744661736858
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "ee4bcb60aa134b7ebc039f3fd645683e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3953.6367453299822,
        "Y": 490.1860928344895
      },
      {
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Id": "13487151afad418a88f3ed3980afe4a9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2883.9468755465687,
        "Y": 776.61709247718227
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "1bc74ee1eac04d7da327b65fdc3c6ca2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2652.7272156184617,
        "Y": 835.93388548117161
      },
      {
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Id": "3fa91cfdb4a7415eb70dc62a1da4be28",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2871.7360956573107,
        "Y": 1018.1232888390391
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a0b49f44a094437b8aa0d32dc550a020",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2664.7179410354547,
        "Y": 1051.6774389916927
      },
      {
        "Name": "Refresh",
        "ShowGeometry": true,
        "Id": "9370449425ca4046aa26e5a53de2c2ea",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 573.45080733289808,
        "Y": 678.66826086636991
      },
      {
        "Name": "Do yo want to join Elements?",
        "ShowGeometry": true,
        "Id": "aaea0604c03f462a8fc112827ce0bcaf",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3191.5586414719182,
        "Y": 529.02113078414106
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "3fb62a03b3be403082e0e13a901ae618",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3262.0697254208221,
        "Y": 699.9541024530248
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "5f0b44daef1641d5ae78b95b4ba3f3ba",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2269.8017129704167,
        "Y": 883.46265661063262
      },
      {
        "Name": "If",
        "ShowGeometry": true,
        "Id": "d720e0a2af6d47898dee070f17cfad55",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3531.5181841967496,
        "Y": 507.78687737399912
      },
      {
        "Name": "If",
        "ShowGeometry": true,
        "Id": "6ea9c575b9604630a9c1f64340d99377",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3534.9549093732562,
        "Y": 705.559479037553
      }
    ],
    "Annotations": [
      {
        "Id": "289b62cd796f40bab79e8ef1da9fed8e",
        "Title": "To get Unjoined Elements ",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "7ebee3e1c4064f69bdc92863be6100d1",
          "9370449425ca4046aa26e5a53de2c2ea"
        ],
        "HasNestedGroups": false,
        "Left": 563.45080733289808,
        "Top": 540.780441560597,
        "Width": 412.50973561883688,
        "Height": 269.6878193057729,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 656.380441560597,
        "InitialHeight": 167.28781930577293,
        "TextblockHeight": 105.6,
        "Background": "#FFA4E1FF"
      },
      {
        "Id": "f5719299ac9a40d185267a788d9ee0e8",
        "Title": "Process Elements",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "7305fe05138440858b3a5656c450aa92",
          "220b54d2784546b3a2f990f8045ada06"
        ],
        "HasNestedGroups": false,
        "Left": 989.811295493813,
        "Top": 582.44839877984,
        "Width": 462.28859396915152,
        "Height": 244.92606739384576,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 654.84839877984,
        "InitialHeight": 155.32606739384585,
        "TextblockHeight": 62.4,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "e3931aaf86e04317af5498de85fb389f",
        "Title": "Create a 3D view",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "38f1b3e8a394467f8eb0e0d34ed4b699",
          "7beaa89cb7e74847ae974ec11adfc1a0"
        ],
        "HasNestedGroups": false,
        "Left": 1455.5049873242108,
        "Top": 368.04616065557724,
        "Width": 532.08322770647237,
        "Height": 212.72825315971187,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 440.44616065557722,
        "InitialHeight": 151.9282531597118,
        "TextblockHeight": 62.4,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "ec43417245dc4cf0ba9541054f25ed62",
        "Title": "Isolate Elements in view",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "7fe3f8a3dbac4511839384f21e2aba64"
        ],
        "HasNestedGroups": false,
        "Left": 2048.8645784862506,
        "Top": 389.65124931364267,
        "Width": 194.40000000000009,
        "Height": 322.59999999999991,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 548.45124931364262,
        "InitialHeight": 145.0,
        "TextblockHeight": 148.79999999999998,
        "Background": "#FFC1D676"
      },
      {
        "Id": "9f573aff9a6f421caebbd3834ea33475",
        "Title": "Join the elements to make clear drawing",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "ee4bcb60aa134b7ebc039f3fd645683e"
        ],
        "HasNestedGroups": false,
        "Left": 3943.6367453299822,
        "Top": 244.98609283448951,
        "Width": 194.40000000000009,
        "Height": 408.99999999999994,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 490.1860928344895,
        "InitialHeight": 145.0,
        "TextblockHeight": 235.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "bbcff05be883498aa9d77ef99cf6bef8",
        "Title": "Script Information",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "ff29be5f6ff545e4b433c175139b90b0"
        ],
        "HasNestedGroups": false,
        "Left": 568.36347867442123,
        "Top": 47.171297695642444,
        "Width": 316.0,
        "Height": 337.79999999999995,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 119.57129769564244,
        "InitialHeight": 145.0,
        "TextblockHeight": 62.4,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "ce10fe7d02aa46fa9c273bc8f8201313",
        "Title": "Group list ",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "13487151afad418a88f3ed3980afe4a9",
          "1bc74ee1eac04d7da327b65fdc3c6ca2",
          "3fa91cfdb4a7415eb70dc62a1da4be28",
          "a0b49f44a094437b8aa0d32dc550a020",
          "5f0b44daef1641d5ae78b95b4ba3f3ba"
        ],
        "HasNestedGroups": false,
        "Left": 2259.8017129704167,
        "Top": 704.21709247718229,
        "Width": 857.34516257615178,
        "Height": 479.26034651451039,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 776.61709247718227,
        "InitialHeight": 420.06034651451046,
        "TextblockHeight": 62.4,
        "Background": "#FFFFC999"
      },
      {
        "Id": "cfb6214c0c9b47af8149061e7519137c",
        "Title": "Join Element",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "aaea0604c03f462a8fc112827ce0bcaf",
          "3fb62a03b3be403082e0e13a901ae618",
          "d720e0a2af6d47898dee070f17cfad55",
          "6ea9c575b9604630a9c1f64340d99377"
        ],
        "HasNestedGroups": false,
        "Left": 3181.5586414719182,
        "Top": 435.38687737399914,
        "Width": 556.99626790133789,
        "Height": 467.57260166355388,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 507.78687737399912,
        "InitialHeight": 425.17260166355391,
        "TextblockHeight": 62.4,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "ff29be5f6ff545e4b433c175139b90b0",
        "Title": "                                                                                       CREATED BY: Chirag Savaliya\r\nCREATED: 24/10/2024\r\nVERSION: V 0.1\r\nLAST EDITED: 24/10/2024\r\n\r\nDYNAMO VERSION: It supports all Dynamo Versions in Revit 2020 to Present.\r\n\r\nPACKAGES:\r\n\r\nNOTES:\r\n\r\n\r\nContact: Savaliya.chirag1998@gmail.com\r\n",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": 578.36347867442123,
        "Top": 127.57129769564244,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -1944.8634437256628,
    "Y": -16.72149359150751,
    "Zoom": 0.74561611074672074
  }
}